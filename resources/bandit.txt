4:
2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe
5:
lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR
6:
P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
The password for the next level is stored somewhere on the server and has all of the following properties:

owned by user bandit7
owned by group bandit6
33 bytes in size

find / -user bandit7 -group bandit6 -size 33c 2>/dev/null
7:
z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S|
The password for the next level is stored in the file data.txt next to the word millionth
8:
TESKZC0XvTetK0S9xNwm25STk5iWrBvP
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once

sort data.txt | uniq -u
9:
EN632PlfYiZbn3PhVK3XOGSlNInNE00t
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.
strings data.txt | grep "="
10:
G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
The password for the next level is stored in the file data.txt, which contains base64 encoded data
11:
6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions

cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'
12:
JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)

ssh -p 2220 bandit12@bandit.labs.overthewire.org


xxd -r data.txt > data
file -b data
mv data data.gz/bz2
gzip -d filename.gz
bzip2 -d filename.bz2
tar -xf filename apapun bisa
tar -xzf filename.tar.gz
tar -xjf filename.tar.bz2


13:
wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw
ssh -p 2220 bandit13@bandit.labs.overthewire.org

The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on


ssh -p 2220 -i ./sshkey.private bandit14@bandit.labs.overthewire.org
ssh -p 2220 bandit14@bandit.labs.overthewire.org

14: 
(ssh key) or fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq
nc localhost 30000 or echo 'fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq' | nc localhost 30000
telnet localhost 30000

15:
jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt
ssh -p 2220 bandit15@bandit.labs.overthewire.org

The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.

Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…

echo "jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt" | openssl s_client -connect localhost:30001 -quiet

16:
JQttfApK4SeyHwDlI9SXGR50qclOAil1
ssh -p 2220 bandit16@bandit.labs.overthewire.org

The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.

nmap -p 31000-32000 localhost
mapfile -t port < <(nmap -p 31000-32000 localhost | grep open | awk '{print $1}' | sed 's|/tcp||g')
echo "bandit16@bandit:~$ for i in "${port[@]}"; do echo "trying port $i"; echo "$pw" | timeout 3 openssl s_client -connect localhost:$i -quiet 2>/dev/null; done

17:
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

chmod 600 bandit17key

ssh -p 2220 -i bandit17key bandit17@bandit.labs.overthewire.org

There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new

NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19

diff passwords.old passwords.new

18:
hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg

ssh -p 2220 bandit18@bandit.labs.overthewire.org "cat readme"

The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.

19:
awhqfNnAbc1naukrpqDYcF95h7HoMTrC
ssh -p 2220 bandit19@bandit.labs.overthewire.org

To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.

ls -la
./bandit20-do cat /etc/bandit_pass/bandit20

20:
VxCazJaVykI6W36BkBU0mJTCM8rR95XT
ssh -p 2220 bandit20@bandit.labs.overthewire.org

There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).

NOTE: Try connecting to your own network daemon to see if it works as you think

Commands you may need to solve this level
ssh, nc, cat, bash, screen, tmux, Unix ‘job control’ (bg, fg, jobs, &, CTRL-Z, …)

tmux
ctrl b + " or ctrl b + %
nc -lvp 12345
./suconnect 12345

21:
NvEJF7oVjkddltPSrdKEFOllh9V1IBcq
ssh -p 2220 bandit21@bandit.labs.overthewire.org

A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.
Commands you may need to solve this level
cron, crontab, crontab(5) (use “man 5 crontab” to access this)

just cat haha (we only do inspections)

22:
WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff
ssh -p 2220 bandit22@bandit.labs.overthewire.org
QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.

mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)
cat /tmp/$mytarget

23:
QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G
ssh -p 2220 bandit23@bandit.labs.overthewire.org

bandit23.sh

24:
VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar
ssh -p 2220 bandit24@bandit.labs.overthewire.org
for pin in {0000..9999}; do
    echo "VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar $pin"
done | nc localhost 30002
25:

ssh -p 2220 bandit25@bandit.labs.overthewire.org
ssh -p 2220 bandit26@bandit.labs.overthewire.org
ssh -p 2220 bandit27@bandit.labs.overthewire.org
ssh -p 2220 bandit28@bandit.labs.overthewire.org
ssh -p 2220 bandit29@bandit.labs.overthewire.org
ssh -p 2220 bandit30@bandit.labs.overthewire.org
ssh -p 2220 bandit31@bandit.labs.overthewire.org
ssh -p 2220 bandit32@bandit.labs.overthewire.org
ssh -p 2220 bandit33@bandit.labs.overthewire.org
ssh -p 2220 bandit34@bandit.labs.overthewire.org
